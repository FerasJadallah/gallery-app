"use client";

import Link from "next/link";
import { useRouter } from "next/navigation";
import { ChangeEvent, FormEvent, useState } from "react";
import { z } from "zod";

import { supabase } from "@/app/supabase/client";
import { AuthShell } from "@/components/auth/AuthShell";
import { AlertBanner } from "@/components/ui/alert-banner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useAlert } from "@/hooks/use-alert";

const signupSchema = z
  .object({
    email: z.string().email("Please enter a valid email address."),
    password: z.string().min(8, "Password must be at least 8 characters long."),
    confirmPassword: z.string(),
    fullName: z.string().min(2, "Please enter your full name."),
    username: z
      .string()
      .min(3, "Username must be at least 3 characters.")
      .max(20, "Username must be at most 20 characters.")
      .regex(/^[a-z][a-z0-9_]*$/, "Use lowercase letters, numbers, and underscore; start with a letter."),
  })
  .superRefine(({ password, confirmPassword }, ctx) => {
    if (password !== confirmPassword) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        path: ["confirmPassword"],
        message: "Passwords do not match.",
      });
    }
  });

type SignupValues = z.infer<typeof signupSchema>;

const INITIAL_VALUES: SignupValues = {
  email: "",
  password: "",
  confirmPassword: "",
  fullName: "",
  username: "",
};

export default function SignupPage() {
  const router = useRouter();
  const { alert, showAlert, clearAlert } = useAlert();
  const [values, setValues] = useState<SignupValues>(INITIAL_VALUES);
  const [errors, setErrors] = useState<Partial<Record<keyof SignupValues, string>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const footer = (
    <p>
      Already have an account?{" "}
      <Link href="/login" className="font-medium text-slate-900 underline-offset-4 hover:underline">
        Log in
      </Link>
    </p>
  );

  const handleChange = (field: keyof SignupValues) => (event: ChangeEvent<HTMLInputElement>) => {
    setValues((prev) => ({ ...prev, [field]: event.target.value }));
    setErrors((prev) => ({ ...prev, [field]: undefined }));
  };

  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    clearAlert();
    setErrors({});

    const parsed = signupSchema.safeParse(values);

    if (!parsed.success) {
      const fieldErrors = parsed.error.flatten().fieldErrors;
      setErrors({
        email: fieldErrors.email?.[0],
        password: fieldErrors.password?.[0],
        confirmPassword: fieldErrors.confirmPassword?.[0],
        fullName: fieldErrors.fullName?.[0],
        username: fieldErrors.username?.[0],
      });
      showAlert("error", "Please fix the highlighted issues and try signing up again.");
      return;
    }

    const { email, password, fullName, username } = parsed.data;
    setIsSubmitting(true);

    try {
      console.log('Attempting signup with:', { email, username: username.toLowerCase(), fullName });

      // First check if username is taken
      const { data: existingProfile } = await supabase
        .from('profiles')
        .select('username')
        .eq('username', username.toLowerCase())
        .single();

      if (existingProfile) {
        showAlert('error', 'This username is already taken. Please choose another one.');
        return;
      }

      // Proceed with signup
      const { data, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: fullName,
            username: username.toLowerCase()
          }
        }
      });

      if (signUpError) {
        console.error('Signup error:', signUpError);
        showAlert('error', signUpError.message);
        return;
      }

      if (!data?.user?.id) {
        showAlert('error', 'Failed to create account. Please try again.');
        return;
      }

      // Wait a moment for the trigger to create the profile
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Verify profile creation
      const { data: profile, error: profileVerifyError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', data.user.id)
        .single();

      if (profileVerifyError) {
        console.error('Profile verification error:', profileVerifyError);
        showAlert('error', 'Account created but profile setup failed. Please contact support.');
      } else {
        console.log('Profile created successfully:', profile);
        showAlert('success', 'Account created successfully! Please check your email to confirm your account.');
        router.push('/login');
      }
    } catch (err) {
      console.error('Unexpected error during signup:', err);
      showAlert('error', 'An unexpected error occurred. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <AuthShell title="Create an account" footer={footer}>
      <div className="flex w-full flex-col gap-6">
        <div>
          <h1 className="text-2xl font-semibold tracking-tight text-slate-900">Create an account</h1>
          <p className="text-sm text-slate-600">Create an account to share your photo albums with friends and family.</p>
        </div>

        {alert && <AlertBanner {...alert} variant={alert.type} />}

        <form onSubmit={onSubmit} className="flex flex-col gap-4">
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={values.email}
              onChange={handleChange("email")}
              hasError={!!errors.email}
              required
            />
          </div>

          <div>
            <Label htmlFor="fullName">Full name</Label>
            <Input
              id="fullName"
              type="text"
              value={values.fullName}
              onChange={handleChange("fullName")}
              hasError={!!errors.fullName}
              required
            />
          </div>

          <div>
            <Label htmlFor="username">Username</Label>
            <Input
              id="username"
              type="text"
              value={values.username}
              onChange={handleChange("username")}
              hasError={!!errors.username}
              required
            />
          </div>

          <div>
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              value={values.password}
              onChange={handleChange("password")}
              hasError={!!errors.password}
              required
            />
          </div>

          <div>
            <Label htmlFor="confirmPassword">Confirm password</Label>
            <Input
              id="confirmPassword"
              type="password"
              value={values.confirmPassword}
              onChange={handleChange("confirmPassword")}
              hasError={!!errors.confirmPassword}
              required
            />
          </div>

          <Button type="submit" disabled={isSubmitting}>
            Create account
          </Button>
        </form>
      </div>
    </AuthShell>
  );
}